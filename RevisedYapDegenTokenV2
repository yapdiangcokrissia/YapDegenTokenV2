// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.8.0/contracts/token/ERC20/ERC20.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.8.0/contracts/access/Ownable.sol";

contract YapDegenTokenV2 is ERC20, Ownable {

    // Struct to represent an item and its location
    struct Item {
        string itemName;
        string location;
        uint256 quantity;
    }

    // Struct to represent store item details
    struct StoreItem {
        uint256 price;
        uint256 quantity;
    }

    // Predefined locations for redeeming items
    string constant ENCHANTED_FOREST = "Enchanted Forest";
    string constant DRAGON_LAIR = "Dragon's Lair";
    string constant CRYSTAL_CAVE = "Crystal Cave";

    // Mapping for in-game store items and their details
    mapping(string => StoreItem) public storeItems;
    // Mapping to store redeemed items and their locations by user
    mapping(address => Item[]) public redeemedItems;

    // Event logging for key actions
    event Minted(address indexed to, uint256 amount);
    event Redeemed(address indexed from, uint256 amount, string itemName, string location);
    event Burned(address indexed from, uint256 amount);
    event ItemAddedToStore(string itemName, uint256 price, uint256 quantity);
    event ItemRemovedFromStore(string itemName);
    event ItemPriceUpdated(string itemName, uint256 newPrice);
    event ItemQuantityUpdated(string itemName, uint256 newQuantity);

    constructor() ERC20("Degen", "DGN") {
        // Initialize with some store items (item names, prices, and quantities)
        addItemToStore("Mystic Wand", 120, 10);
        addItemToStore("Warrior's Shield", 180, 5);
        addItemToStore("Healing Elixir", 60, 20);
    }

    // Minting function: Only the owner can mint new tokens
    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
        emit Minted(to, amount);
    }

    // Redeeming function: Redeem tokens for items in the in-game store and specify the location
    function redeem(string memory itemName, string memory location, uint256 quantity) public {
        require(
            keccak256(bytes(location)) == keccak256(bytes(ENCHANTED_FOREST)) ||
            keccak256(bytes(location)) == keccak256(bytes(DRAGON_LAIR)) ||
            keccak256(bytes(location)) == keccak256(bytes(CRYSTAL_CAVE)),
            "Invalid location"
        );

        StoreItem storage item = storeItems[itemName];
        uint256 totalPrice = item.price * quantity;
        require(item.price > 0, "Item not available in store");
        require(item.quantity >= quantity, "Insufficient item quantity");
        require(balanceOf(msg.sender) >= totalPrice, "Insufficient balance");

        // Deduct balance from the user's account
        _transfer(msg.sender, owner(), totalPrice);

        // Update the user's balance and item quantity
        _burn(msg.sender, totalPrice); // Subtract redeemed tokens from user's balance
        item.quantity -= quantity;

        // Record redeemed item and location
        redeemedItems[msg.sender].push(Item(itemName, location, quantity));
        emit Redeemed(msg.sender, totalPrice, itemName, location);
    }

    // Burn function: Allows anyone to burn their own tokens
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
        emit Burned(msg.sender, amount);
    }

    // Owner can add new items to the in-game store
    function addItemToStore(string memory itemName, uint256 price, uint256 quantity) public onlyOwner {
        storeItems[itemName] = StoreItem(price, quantity);
        emit ItemAddedToStore(itemName, price, quantity);
    }

    // Owner can remove items from the in-game store
    function removeItemFromStore(string memory itemName) public onlyOwner {
        require(storeItems[itemName].price > 0, "Item not found in store");
        delete storeItems[itemName];
        emit ItemRemovedFromStore(itemName);
    }

    // Owner can update the price of an item in the in-game store
    function updateItemPrice(string memory itemName, uint256 newPrice) public onlyOwner {
        require(storeItems[itemName].price > 0, "Item not found in store");
        storeItems[itemName].price = newPrice;
        emit ItemPriceUpdated(itemName, newPrice);
    }

    // Owner can update the quantity of an item in the in-game store
    function updateItemQuantity(string memory itemName, uint256 newQuantity) public onlyOwner {
        require(storeItems[itemName].price > 0, "Item not found in store");
        storeItems[itemName].quantity = newQuantity;
        emit ItemQuantityUpdated(itemName, newQuantity);
    }

    // Get the price of an item in the store
    function getStoreItemPrice(string memory itemName) public view returns (uint256) {
        return storeItems[itemName].price;
    }

    // Get the quantity of an item in the store
    function getStoreItemQuantity(string memory itemName) public view returns (uint256) {
        return storeItems[itemName].quantity;
    }

    // Get a list of redeemed items and their locations for a user
    function getRedeemedItems(address user) public view returns (Item[] memory) {
        return redeemedItems[user];
    }
}
