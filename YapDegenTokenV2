// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.8.0/contracts/token/ERC20/ERC20.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.8.0/contracts/access/Ownable.sol";

contract YapDegenTokenV2 is ERC20, Ownable {

    // Struct to represent an item and its location
    struct Item {
        string itemName;
        string location;
        uint256 quantity;
    }

    // Mapping for in-game store items and their prices in tokens
    mapping(string => uint256) public storeItems;
    // Mapping to store redeemed items and their locations by user
    mapping(address => Item[]) public redeemedItems;

    // Event logging for key actions
    event Minted(address indexed to, uint256 amount);
    event Redeemed(address indexed from, uint256 amount, string itemName, string location);
    event Burned(address indexed from, uint256 amount);
    event ItemAddedToStore(string itemName, uint256 price);
    event ItemRemovedFromStore(string itemName);

    constructor() ERC20("Degen", "DGN") {
        // Initialize with some store items (item names and their token prices)
        addItemToStore("Dragon Slayer Axe", 150);
        addItemToStore("Health Potion", 50);
        addItemToStore("Jetpack", 200);
    }

    // Minting function: Only the owner can mint new tokens
    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
        emit Minted(to, amount);
    }

    // Redeeming function: Redeem tokens for items in the in-game store and specify the location
    function redeem(string memory itemName, string memory location, uint256 quantity) public {
        uint256 itemPrice = storeItems[itemName];
        uint256 totalPrice = itemPrice * quantity;
        require(itemPrice > 0, "Item not available in store");
        require(balanceOf(msg.sender) >= totalPrice, "Insufficient balance");

        // Deduct balance from the user's account
        _transfer(msg.sender, owner(), totalPrice);

        // Update the user's balance
        _burn(msg.sender, totalPrice); // Subtract redeemed tokens from user's balance

        // Record redeemed item
        redeemedItems[msg.sender].push(Item(itemName, location, quantity));
        emit Redeemed(msg.sender, totalPrice, itemName, location);
    }

    // Burn function: Allows anyone to burn their own tokens
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
        emit Burned(msg.sender, amount);
    }

    // Owner can add new items to the in-game store
    function addItemToStore(string memory itemName, uint256 price) public onlyOwner {
        storeItems[itemName] = price;
        emit ItemAddedToStore(itemName, price);
    }

    // Owner can remove items from the in-game store
    function removeItemFromStore(string memory itemName) public onlyOwner {
        require(storeItems[itemName] > 0, "Item not found in store");
        delete storeItems[itemName];
        emit ItemRemovedFromStore(itemName);
    }

    // Get a list of redeemed items and their locations for a user
    function getRedeemedItems(address user) public view returns (Item[] memory) {
        return redeemedItems[user];
    }
}
